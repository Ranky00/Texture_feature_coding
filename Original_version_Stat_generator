#This code  create the mean, SD, p-values, and t-values of two texture features (total energy and IDM) for Grey Matter and White Matter

###This block is the import block where we import all important packages
import pandas as pd
from scipy import stats
from scipy.stats import ttest_ind_from_stats
import numpy as np
import statsmodels.api as sm
from statsmodels.formula.api import ols

###Read the a csv ROI input file. Add your directory to this area
df1 = pd.read_csv('/150_IDM_TE.csv')

##Calculate the mean and SD. Be careful, change the "Amyloid_s_th" to whatever you are grouping with
grouped_mean = df1.groupby('Amyloid_s_th')[['TotalEnergy_GM','TotalEnergy_WM','IDM_GM','IDM_WM']].mean().reset_index().round(2)
grouped_sd = df1.groupby('Amyloid_s_th')[['TotalEnergy_GM','TotalEnergy_WM','IDM_GM','IDM_WM']].std().reset_index().round(2)

###Concatenate the mean and SD so they appear in the same frame
frames = [grouped_mean, grouped_sd]
result = pd.concat(frames)

## create a model for the grey and white matter for both total energy and IDM
model1a = ols('TotalEnergy_GM ~ Amyloid_s_th + AGE', data=df1).fit() 
model1b = ols('TotalEnergy_WM ~ Amyloid_s_th + AGE', data=df1).fit()
model2a= ols('IDM_GM ~ Amyloid_s_th + AGE', data=df1).fit()
model2b= ols('IDM_WM ~ Amyloid_s_th + AGE', data=df1).fit()


#create an array of the p-value and t-values so they fit in the print position of the display table. 
for r in range (1, 2): 
    #arr=[model1a.pvalues[r],model1a.tvalues[r],model1b.pvalues[r],model1b.tvalues[r],model2a.pvalues[r],model2a.tvalues[r],model2b.pvalues[r],model2b.tvalues[r],model3a.pvalues[r],model3a.tvalues[r],model3b.pvalues[r],model3b.tvalues[r],model4a.pvalues[r],model4a.tvalues[r],model4b.pvalues[r],model4b.tvalues[r],model5a.pvalues[r],model5a.tvalues[r],model5b.pvalues[r],model5b.tvalues[r],model6a.pvalues[r],model6a.tvalues[r],model6b.pvalues[r],model6b.tvalues[r],model7a.pvalues[r],model7a.tvalues[r],model7b.pvalues[r],model7b.tvalues[r],model8a.pvalues[r],model8a.tvalues[r],model8b.pvalues[r],model8b.tvalues[r]]
    arr=[model1a.pvalues[r],model1b.pvalues[r],model2a.pvalues[r],model2b.pvalues[r]]
    arr1=[model1a.tvalues[r],model1b.tvalues[r],model2a.tvalues[r],model2b.tvalues[r]]
    rppp= pd.DataFrame(list(zip(arr, arr1)), columns =['P-value', 'T-value']).T 
    rppp['Amyloid_s_th']="NaN";rppp['TotalEnergy_GM']=rppp[0];rppp['TotalEnergy_WM']=rppp[1];rppp['IDM_GM']=rppp[2];rppp['IDM_WM']=rppp[3]

    ##concatenate arrays and the results from the mean and SD.
    frames2 = [result, rppp]
    result2 = pd.concat(frames2)

    ### Show the columns and rows with the requiresd columns and transpose the displays
    nig=result2.drop(columns=[0,1,2,3, 'Amyloid_s_th'])
    row_names ={0:'Negative_Mean',1:'Positive_Mean',0:'Negative_SD',1:'Positive_SD'}
    final=nig.rename(index = row_names)
    #display(final.T)
    dm = pd.DataFrame(final)
    j=dm.transpose()
    cols=pd.Series(j.columns)
    for dup in j.columns[j.columns.duplicated(keep=False)]:
        cols[j.columns.get_loc(dup)] = ([dup + '.' + str(d_idx) 
                                     if d_idx != 0 
                                     else dup 
                                     for d_idx in range(j.columns.get_loc(dup).sum())]
                                    )
    j.columns = cols
    j.rename(columns={'Negative_SD': "Negative_Mean",'Positive_SD': "Positive_Mean",'Negative_SD.1': "Negative_SD",'Positive_SD.1': "Positive_SD"}, inplace = True)

    ## print this results
    display(j)
    
